---

# Alpine linux Harbor image repository
# documentation:
# https://goharbor.io/docs/2.8.0/install-config/ 

- name: Test connection with ping
  ansible.builtin.ping:

- name: Install packages python3 py-setuptools tar gzip sed curl bash openssl docker docker-compose gpg ncurses
  community.general.apk:
    name: python3,py-setuptools,tar,gzip,sed,curl,bash,openssl,docker,docker-compose,gpg,ncurses
    state: present
    update_cache: true

- name: Download harbor-online-installer-v2.12.3.tgz
  ansible.builtin.get_url:
    url: https://github.com/goharbor/harbor/releases/download/v2.12.3/harbor-online-installer-v2.12.3.tgz
    dest: /root

- name: Ensure group "harbor" exists with correct gid 10000
  ansible.builtin.group:
    name: harbor
    state: present
    gid: 10000

- name: Add the user 'harbor' with uid 10000 and a primary group of 'harbor'
  ansible.builtin.user:
    name: harbor
    comment: Harbor
    uid: 10000
    group: harbor

- name: Create /harbor directory if it does not exist
  ansible.builtin.file:
    path: /harbor
    state: directory
    mode: '0755'
    owner: harbor
    group: harbor

- name: Unarchive harbor-online-installer-v2.12.3.tgz to /harbor
  ansible.builtin.unarchive:
    src: /root/harbor-online-installer-v2.12.3.tgz
    dest: /
    remote_src: yes

- name: Install apk package - certbot
  command: /sbin/apk add certbot

- name: Open port 80/tcp with ufw for Harbor portal and core API HTTP
  command: /usr/sbin/ufw allow 80/tcp

- name: Open port 443/tcp with ufw for Harbor portal and core API HTTPS
  command: /usr/sbin/ufw allow 443/tcp

#- name: Open port 4443/tcp with ufw for Connections to the Docker Content Trust service for Harbor (Notary)
#  command: /usr/sbin/ufw allow 4443/tcp

- name: Get ufw status numbered
  ansible.builtin.command: /usr/sbin/ufw status numbered
  register: get_ufw_status

- name: Print ufw status numbered
  ansible.builtin.debug:
    var: get_ufw_status.stdout_lines

- name: Create /data directory if it does not exist
  ansible.builtin.file:
    path: /data
    state: directory
    mode: '0755'
    owner: harbor
    group: harbor

- name: Create /data/secret directory if it does not exist
  ansible.builtin.file:
    path: /data/secret
    state: directory
    mode: '0755'
    owner: harbor
    group: harbor

- name: Create /data/secret/cert directory if it does not exist
  ansible.builtin.file:
    path: /data/secret/cert
    state: directory
    mode: '0755'
    owner: harbor
    group: harbor

- name: Create /etc/docker directory if it does not exist
  ansible.builtin.file:
    path: /etc/docker
    state: directory
    mode: '0755'

- name: Create /etc/docker/certs.d directory if it does not exist
  ansible.builtin.file:
    path: /etc/docker/certs.d
    state: directory
    mode: '0755'

- name: Create /etc/docker/certs.d/{{reg_fqdn}} directory if it does not exist
  ansible.builtin.file:
    path: /etc/docker/certs.d/{{reg_fqdn}}
    state: directory
    mode: '0755'

- name: Get LetsEncrypt certificate for {{reg_fqdn}} with certbot
  command: certbot certonly --standalone -m {{reg_certbot_email}} --agree-tos -n -d {{reg_fqdn}}
  register: get_certbot_result

- name: Print certbot output
  ansible.builtin.debug:
    var: get_certbot_result.stdout_lines

- name: Create /etc/letsencrypt/renewal-hooks/pre/harbor.sh
  copy:
    dest: /etc/letsencrypt/renewal-hooks/pre/harbor.sh
    mode: '0755'
    content: |
      #!/bin/bash
      /usr/bin/docker stop nginx

- name: Create /etc/letsencrypt/renewal-hooks/post/harbor.sh
  copy:
    dest: /etc/letsencrypt/renewal-hooks/post/harbor.sh
    mode: '0755'
    content: |
      #!/bin/bash
      /bin/cp -f /etc/letsencrypt/live/{{reg_fqdn}}/fullchain.pem /data/secret/cert/server.crt
      /bin/cp -f /etc/letsencrypt/live/{{reg_fqdn}}/privkey.pem /data/secret/cert/server.key
      /bin/chown harbor:harbor /data/secret/cert/server.crt
      /bin/chown harbor:harbor /data/secret/cert/server.key
      /usr/bin/openssl x509 -inform PEM -in /etc/letsencrypt/live/{{reg_fqdn}}/fullchain.pem -out /etc/docker/certs.d/{{reg_fqdn}}/{{reg_fqdn}}.cert
      /bin/cp -f /etc/letsencrypt/live/{{reg_fqdn}}/privkey.pem /etc/docker/certs.d/{{reg_fqdn}}/{{reg_fqdn}}.key
      /usr/bin/docker start nginx

- name: Copy /etc/letsencrypt/live/{{reg_fqdn}}/fullchain.pem to /data/secret/cert/server.crt
  ansible.builtin.copy:
    src: /etc/letsencrypt/live/{{reg_fqdn}}/fullchain.pem
    dest: /data/secret/cert/server.crt
    remote_src: yes
    mode: '0755'
    owner: harbor
    group: harbor

- name: Copy /etc/letsencrypt/live/{{reg_fqdn}}/privkey.pem to /data/secret/cert/server.key
  ansible.builtin.copy:
    src: /etc/letsencrypt/live/{{reg_fqdn}}/privkey.pem
    dest: /data/secret/cert/server.key
    remote_src: yes
    mode: '0755'
    owner: harbor
    group: harbor

- name: Convert LetsEncrypt certificate for use by Docker
  ansible.builtin.command: openssl x509 -inform PEM -in /etc/letsencrypt/live/{{reg_fqdn}}/fullchain.pem -out /etc/docker/certs.d/{{reg_fqdn}}/{{reg_fqdn}}.cert

- name: Copy /etc/letsencrypt/live/{{reg_fqdn}}/privkey.pem to /data/secret/cert/server.key
  ansible.builtin.copy:
    src: /etc/letsencrypt/live/{{reg_fqdn}}/privkey.pem
    dest: /etc/docker/certs.d/{{reg_fqdn}}/{{reg_fqdn}}.key
    remote_src: yes

- name: Add docker service to default runlevel
  ansible.builtin.command: /sbin/rc-update add docker default

- name: Start docker service
  ansible.builtin.command: /sbin/rc-service docker start

- name: Check docker service status
  ansible.builtin.command:
    cmd: /sbin/rc-service docker status
  register: check_docker_svc_output

- name: Print docker service status
  ansible.builtin.debug:
    var: check_docker_svc_output.stdout_lines

- name: DockerHub login
  ansible.builtin.command:
    cmd: docker login -u {{reg_dockerhub_user}} -p {{reg_dockerhub_password}}
  register: docker_login_output

- name: Print DockerHub login output
  ansible.builtin.debug:
    var: docker_login_output.stdout_lines
